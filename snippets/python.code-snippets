{
    "django model template": {
        "prefix": "vdmodel",
        "body": [
            "# from django.db import models",
            "# from commons.models import BaseModel",
            "# from commons.utils import FileValidator",
            "# from ${1:module}.paths import ${3:my_model_directory_path} ",
            "# from other_module.models import ParentModel",
            "# from commons.validators import FILE_VALIDATOR",
            "",
            "class ${2:MYModel}(BaseModel):",
            "    # integer_field = models.IntegerField()",
            "    # char_field = models.CharField(max_length=255, unique=False, null=False, blank=False)",
            "    # description = models.TextField(null=True, blank=True)",
            "    # int_field = models.IntegerField(max_length=40, null=True, blank=True, unique=False)",
            "    # file_field = models.FileField(",
            "    #     upload_to=${3:my_model_directory_path},",
            "    #     max_length=2000,",
            "    #     null=True,",
            "    #     blank=True,",
            "    #     validators=[FILE_VALIDATOR]",
            "    # )",
            "",
            "    # foreign_key = models.ForeignKey(ParentModel, null=True, blank=True, on_delete=models.SET_NULL,",
            "    #                          related_name=\"child_parent\")",
            "    # one_to_one_field = models.OneToOneField(ParentModel, blank=True, null=True, on_delete=models.CASCADE,",
            "    #                              related_name=\"child_parent\")",
            "    # many_to_many_field = models.ManyToManyField(ParentModel, through='Membership')",
            "    # date_field = models.DateField()",
            "    # MODEL_OPTIONS = (",
            "    #     ('S', 'Small'),",
            "    #     ('M', 'Medium'),",
            "    #     ('L', 'Large'),",
            "    # )    ",
            "    # shirt_size = models.CharField(max_length=1, choices=MODEL_OPTIONS)",
            "",
            "    class Meta:",
            "        ordering = [\"created_at\"]",
            "        verbose_name_plural = \"${2:MYModel}\"",
            "    ",
            "    def __str__(self):",
            "        return \"\""
        ],
        "description": "django model template"
    },
    "django inline serializer": {
        "prefix": "vdserializer",
        "body": [
            "from ${1:module}.models import ${2:MyModel}",
            "from rest_framework.serializers import ModelSerializer",
            "",
            "class ${2:MyModel}Serializer(ModelSerializer):",
            "    ",
            "    class Meta:",
            "        model = ${2:MyModel}",
            "        fields = \"__all__\""
        ],
        "description": "django inline serializer"
    },
    "django detailed serializer": {
        "prefix": "vddetailserializer",
        "body": [
            "from rest_framework.serializers import ModelSerializer",
            "from ${5:parent_module}.serializers import ${4:ParentSerializer}",
            "from ${8:child_module}.serializers import ${7:ChildSerializer}",
            "",
            "from ${1:module}.models import ${2:MyModel}",
            "",
            "class ${2:MyModel}Serializer(ModelSerializer):",
            "    ${3:parent} = ${4:ParentSerializer}()",
            "    ${6:children} = ${7:ChildSerializer}(source='${9:child_parent}',many=True)",
            "    ${10:computed_field} = serializers.SerializerMethodField()",
            "",
            "    class Meta:",
            "        model = ${2:MyModel}",
            "        include = ('${10:computed_field}','${3:parent}','${6:children}')",
            "        exclude = ('${11:field_to_exclude}',)",
            "        ",
            "    ",
            "    def get_${10:computed_field}(self, obj):",
            "        # compute result here",
            "        result = \"\"",
            "        return result",
            "",
            "    def create(self, validated_data):",
            "        # get specific field from data",
            "        # email = validated_data.get(\"email\")",
            "",
            "        # create ${2:MyModel}",
            "        ${12:new_model} = ${2:MyModel}.objects.create(**validated_data)",
            "        return ${12:new_model}",
            "",
            "    def update(self, instance, validated_data):",
            "        # get gps locations",
            "        # update dispatch",
            "        for (key, value) in validated_data.items():",
            "            setattr(instance, key, value)",
            "",
            "            instance.save()",
            "            return instance",
            "",
            "",
            "       ",
            "        ",
            ""
        ],
        "description": "django detailed serializer"
    },
    "django simple viewset": {
        "prefix": "vdviewset",
        "body": [
            "",
            "from rest_framework.viewsets import ModelViewSet",
            "from django_filters.rest_framework import DjangoFilterBackend",
            "from rest_framework.permissions import IsAuthenticated, AllowAny, IsAuthenticatedOrReadOnly",
            "from rest_framework import filters",
            "",
            "from ${1:module}.models import ${2:MyModel}",
            "from ${1:module}.serializers import ${3:MyModelSerializer}",
            "",
            "class ${2:MyModel}ViewSet(ModelViewSet):",
            "    model = ${2:MyModel}",
            "    queryset = ${2:MyModel}.objects.all()",
            "    serializer_class = ${3:MyModelSerializer}",
            "    permission_classes = [IsAuthenticated]",
            "    filter_backends = [DjangoFilterBackend, filters.SearchFilter]",
            "    filter_fields = ['${4:field_1}', '${5:field_2}']",
            "    search_fields = ['${4:field_1}', '${5:field_2}']",
            ""
        ],
        "description": "django simple viewset"
    },
    "django detailed viewset": {
        "prefix": "vddetailviewset",
        "body": [
            "",
            "from rest_framework.viewsets import ModelViewSet",
            "from django_filters.rest_framework import DjangoFilterBackend",
            "from rest_framework.permissions import IsAuthenticated, AllowAny, IsAuthenticatedOrReadOnly",
            "from rest_framework import filters",
            "from rest_framework.response import Response",
            "",
            "",
            "from ${1:module}.models import ${2:MyModel}",
            "from ${1:module}.serializers import ${3:MyModelSerializer}, ${7:CustomSerializer}",
            "",
            "class ${2:MyModel}ViewSet(ModelViewSet):",
            "    model = ${2:MyModel}",
            "    queryset = ${2:MyModel}.objects.all()",
            "    serializer_class = ${3:MyModelSerializer}",
            "    permission_classes = [IsAuthenticated]",
            "    filter_backends = [DjangoFilterBackend, filters.SearchFilter]",
            "    filter_fields = ['${4:field_1}', '${5:field_2}']",
            "    search_fields = ['${4:field_1}', '${5:field_2}']",
            "",
            "    def create(self, request, *args, **kwargs):",
            "        serializer = ${7:CustomSerializer}(data=request.data)",
            "        serializer.is_valid(raise_exception=True)",
            "        serializer.save()",
            "        return Response(serializer.data)",
            "    ",
            "    def update(self, request, *args, **kwargs):",
            "        instance = self.get_object()",
            "        serializer = ${7:CustomSerializer}(",
            "            instance=instance,",
            "            data=request.data,",
            "            partial=True",
            "        )",
            "        serializer.is_valid(raise_exception=True)",
            "        serializer.save()",
            "        return Response(serializer.data)",
            "    ",
            "    # TODO: DELETE IF NOT USED",
            "    #custom action example",
            "    # @action(detail=True, methods=['GET'])",
            "    # def customers(self, request, pk=None):",
            "    #     from orders.models import Order",
            "    #     from authentication.models import User",
            "",
            "    #     shop = self.get_object()",
            "",
            "    #     user_ids = Order.objects.filter(shop=shop).values_list('customer', flat=True)",
            "    #     queryset = User.objects.filter(pk__in=user_ids)",
            "    #     page = self.paginate_queryset(queryset)",
            "    #     print(page)",
            "",
            "    #     user_serializer = UserSerializer(page, many=True)",
            "    #     serializer = ShopDetailsSerializer(shop)",
            "    #     return self.get_paginated_response(user_serializer.data)",
            ""
        ],
        "description": "django detailed viewset"
    },
    "django viewset url ": {
        "prefix": "vdurl",
        "body": [
            "",
            "",
            "from django.conf.urls import include",
            "from django.urls import path",
            "from rest_framework.routers import SimpleRouter",
            "",
            "from ${1:module}.views import ${2:MyModelViewSet}",
            "",
            "${3:my_model}_router = SimpleRouter()",
            "${3:my_model}_router.register('', ${2:MyModelViewSet})",
            "${1:module}_urls = [",
            "    path('${4:my-model}/', include(${3:my_model}_router.urls)),    ",
            "]",
            ""
        ],
        "description": "django url viewset"
    },
    "django admin": {
        "prefix": "vdadmin",
        "body": [
            "",
            "from simple_history.admin import SimpleHistoryAdmin",
            "",
            "from ${1:module}.models import ${2:MyModel}",
            "",
            "class ${2:MyModel}Admin(SimpleHistoryAdmin):",
            "    list_display = ('${3:field_1}', \"${4:field_2}\")",
            "    history_list_display = ('${3:field_1}', \"${4:field_2}\" )",
            "    search_fields = ('${3:field_1}', \"${4:field_2}\")",
            "",
            "admin.site.register(${2:MyModel}, ${2:MyModel}Admin)",
            ""
        ],
        "description": "django admin"
    },
    "django filter": {
        "prefix": "vdfilter",
        "body": [
            "",
            "from django.db.models import Q",
            "from django_filters import rest_framework as filters",
            "",
            "from ${1:module}.models import ${2:MyModel}",
            "",
            "class ${2:MyModel}Filter(filters.FilterSet):",
            "    start_time = filters.IsoDateTimeFilter(field_name='created_at',lookup_expr=('gt'),)",
            "    end_time = filters.IsoDateTimeFilter(field_name='created_at',lookup_expr=('lt'))",
            "",
            "    release_year = django_filters.NumberFilter(field_name='release_date', lookup_expr='year')",
            "    price__gt = django_filters.NumberFilter(field_name='price', lookup_expr='gt')",
            "    price__lt = django_filters.NumberFilter(field_name='price', lookup_expr='lt')",
            "",
            "    # foreign key filter",
            "    parent__name = django_filters.CharFilter(lookup_expr='icontains')",
            "",
            "    # calculated filter",
            "    username = CharFilter(method='my_custom_filter')",
            "",
            "    def my_custom_filter(self, queryset, name, value):",
            "        return queryset.filter(**{",
            "            name: value,",
            "        })",
            "    ",
            "    class Meta:",
            "        model = DriverApplication",
            "        fields = ['start_time', 'end_time', 'more_model_fields']",
            "    # alternative",
            "    # class Meta:",
            "    #     model = ${2:MyModel}",
            "    #     fields = {",
            "    #         'price': ['lt', 'gt'],",
            "    #         'release_date': ['exact', 'year__gt'],",
            "    #     }"
        ],
        "description": "django filter"
    },
    "django path": {
        "prefix": "vdpath",
        "body": [
            "from commons.utils import unique_filename",
            "",
            "def generic_directory_path(folder_name, filename):",
            "    \"\"\"Return the base directory path for ${1:module} app.\"\"\"",
            "    filename = unique_filename(filename)",
            "    return f'${1:module}/{folder_name}/{filename}'",
            "",
            "def ${2:model}_${3:extra_path_name}_path(instance, filename):",
            "    \"\"\"${2:model} record media path\"\"\"",
            "    folder_name = f'${2:model}/${3:extra_path_name}/{instance.uuid}'",
            "    return generic_directory_path(folder_name, filename)"
        ],
        "description": "django path"
    },
    "django choices": {
        "prefix": "vdchoices",
        "body": [
            "class ${1:OrderStatus}:",
            "    ${2:CHOICE1} = \"${3:choice1}\"  # ellaborate choice 1",
            "    ${4:CHOICE2} = (",
            "        \"${5:choice2}\"  # ellaborate choice 1",
            "    )",
            "    ",
            "    CHOICES = [",
            "        (${2:CHOICE1}, \"${3:choice1}\"),",
            "        (${4:CHOICE2}, \"${5:choice2}\"),        ",
            "    ]"
        ],
        "description": "django choices"
    },
    "django permission": {
        "prefix": "vdpermission",
        "body": [
            "from rest_framework import permissions",
            "",
            "class ${1:PermissionName}(permissions.BasePermission):",
            "    '''",
            "    Check if the permission is satisfield",
            "    '''",
            "",
            "    #check for attribute",
            "    def has_permission(self, request, view):",
            "        return hasattr(request.user, '${2:field_name}')",
            "",
            "    #compare object and user",
            "    def has_object_permission(self, request, view, obj):",
            "        # Instance must have an attribute named `user`.",
            "        return obj.${3:parent} == request.user"
        ],
        "description": "django permission"
    }
}