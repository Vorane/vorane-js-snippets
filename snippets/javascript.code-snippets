{
  "Evans": {
    "prefix": "vanso",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "",
      "class ${1:componentName} extends Component {",
      "  static propTypes = {",
      "    ${2:prop}: ${3:PropTypes}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "        $0",
      "      </div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "  ",
      "})",
      "",
      "const mapDispatchToProps = {",
      "  ",
      "}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName})",
      ""
    ]
  },
  "Action Types": {
    "prefix": "vractiontypes",
    "body": [
      "export const ${2:ACTION}_REQUESTED = '${1:domain}.${2:ACTION}_REQUESTED';",
      "export const ${2:ACTION}_SUCCEEDED = '${1:domain}.${2:ACTION}_SUCCEEDED';",
      "export const ${2:ACTION}_FAILED = '${1:domain}.${2:ACTION}_FAILED';",
      "export const ${2:ACTION}_DISCONNECTED ='${1:domain}.${2:ACTION}_DISCONNECTED';",
      "export const ${2:ACTION}_RESET = '${1:domain}.${2:ACTION}_RESET';",
      "export const ${2:ACTION}_RESET_DATA = '${1:domain}.${2:ACTION}_RESET_DATA';"
    ]
  },
  "React Native Reducer": {
    "prefix": "vrreducer",
    "body": [
      "import * as actionTypes from './actionTypes';",
      "import * as processTypes from '../Shared/processTypes';",
      "import { persistReducer } from 'redux-persist';",
      "import AsyncStorage from '@react-native-community/async-storage';",
      "import is from 'is_js'",
      "",
      "",
      "const initialState = {",
      " ${2:doSomethingProcess} :{ status : processTypes.IDLE}",
      "};",
      "",
      "const ${1:domain}PersistConfig = {",
      "  key: '${1:domain}',",
      "  storage: AsyncStorage,",
      "  blacklist: ['${2:doSomethingProcess}'],",
      "};",
      "",
      "const ${1:domain}Reducer = (state = initialState, action = {}) => {",
      "  switch (action.type) {",
      "    ",
      "    default:",
      "      if (is.existy(action.payload) && is.existy(action.type)) {",
      "        if (action.type.split('.')[0] === '${1:domain}') {",
      "          return { ...state, ...action.payload }",
      "        } else {",
      "          return state",
      "        }",
      "      } else {",
      "        return state",
      "      }",
      "  }",
      "};",
      "",
      "export default persistReducer(${1:domain}PersistConfig, ${1:domain}Reducer);"
    ]
  },
  "Redux Process": {
    "prefix": "vrprocess",
    "body": [
      " ${1:doSomethingProcess} :{ status : processTypes.IDLE}"
    ]
  },
  "Redux Pagination Object": {
    "prefix": "vrpagedobject",
    "body": [
      "${1:items}Results: {",
      "    currentPage: 0,",
      "    completed: false,",
      "    ${1:items}:[]",
      "}"
    ]
  },
  "Redux Selector": {
    "prefix": "vrselector",
    "body": [
      "export const get${3:reduxObject} = ({${1:domain}}) => ${1:domain}.${2:reduxObject}"
    ]
  },
  "Redux Action": {
    "prefix": "vraction",
    "body": [
      "// TODO: uncomment if new file",
      "// import * as actionTypes from './actionTypes'; ",
      "// import * as sharedServices from 'store/Shared/services';",
      "// import { getAuthToken } from 'store/Authentication/selectors';",
      "// import { backgroundLogin } from 'src/Authentication/actions';",
      "// import { objectToCamelCase, isNull } from 'src/lib/utils';",
      "// import is from 'is_js';",
      "",
      "export const ${1:doSomething} = (${2:param}, ${3:page}=1) => {",
      "    return (dispatch, getState) => {",
      "      //Signal the start of the process",
      "  ",
      "if(page === 1){",
      "",
      "  dispatch({",
      "    type: actionTypes.${4:ACTION_TYPE}_RESET_DATA,",
      "     payload:{",
      "         ${5:items}Results: {",
      "             currentPage: 0,",
      "             completed: false,",
      "             ${5:items}:[]",
      "         }",
      "      }",
      "    });",
      "}",
      "      dispatch({",
      "        type: actionTypes.${4:ACTION_TYPE}_REQUESTED,",
      "        payload:{",
      "            ${6:doSomethingProcess} :{ status : processTypes.PROCESSING}",
      "        }",
      "      });",
      "  ",
      "      //function to fetch from the api",
      "  ",
      "      // TODO: update the endpoint",
      "      const url = sharedServices.API_ENDPOINT.concat(",
      "        `/api/endpoint/${${2:param}}/?page=${${3:page}}`",
      "      );",
      "  ",
      "      let request = {",
      "        method: '${7:POST}',",
      "  ",
      "        headers: {",
      "          'Content-Type': 'application/json',",
      "  ",
      "          Authorization: `JWT ${getAuthToken(getState())}`,",
      "        },",
      "  ",
      "        // TODO: Remove if get request",
      "        body: JSON.stringify({",
      "          param1: 'value',",
      "  ",
      "          param2: 'value',",
      "        }),",
      "      };",
      "  ",
      "      fetch(url, request)",
      "        .then((response) => {",
      "          if (response.status === 200) {",
      "  ",
      "            response.json().then((responseData) => {",
      "              dispatch({",
      "                type: actionTypes.${4:ACTION_TYPE}_SUCCEEDED,",
      "  ",
      "                payload: {",
      "                    ${6:doSomethingProcess} :{ status : processTypes.SUCCESS},",
      "",
      "                    itemsResults:{",
      "                        completed: is.null(responseData.next),",
      "                         // TODO: If page is removed, remove this field",
      "                        currentPage: ${3:page},",
      "                        ${5:items}:[",
      "                            ...get${8:getItems}Results(getState()).${5:items},                            ",
      "                            ...objectToCamelCase(responseData.results),",
      "                        ]",
      "                    }",
      "                },",
      "              });",
      "",
      "            // TODO uncomment to fetch everything",
      "            //   if(is.not.null(responseData.next)){",
      "            //       // TODO: If page is removed, update this parameter",
      "            //       ${1:doSomething}(${2:param}, ${3:page} +1)",
      "            //   }",
      "            });",
      "          }",
      "  ",
      "          //If response is unauthorized, login and try again",
      "          else if (response.status === 401) {",
      "            Promise.resolve(dispatch(backgroundLogin())).then((response) => {",
      "              response",
      "                ? dispatch(${1:doSomething}(${2:param}, ${3:page}))",
      "                : dispatch({",
      "                    type: actionTypes.${4:ACTION_TYPE}_FAILED,",
      "  ",
      "                    payload: { ",
      "                        ${6:doSomethingProcess} :{ status : processTypes.ERROR ,",
      "                            error: 'Unable to authenticate. Please log in' },",
      "                        }",
      "                  });",
      "            });",
      "          } else {",
      "            dispatch({",
      "              type: actionTypes.${4:ACTION_TYPE}_FAILED,",
      "  ",
      "              payload: {",
      "                ${6:doSomethingProcess} :{ status : processTypes.ERROR , ",
      "                    error: 'An error occurred. Please retry' },",
      "                }  ",
      "            });",
      "          }",
      "        })",
      "  ",
      "        .catch((error) => {",
      "          dispatch({",
      "            type: actionTypes.${4:ACTION_TYPE}_FAILED,",
      "  ",
      "            payload: {",
      "                ${6:doSomethingProcess} :{ status : processTypes.ERROR ,",
      "                    error: error.message },",
      "                }",
      "          });",
      "        });",
      "    };",
      "  };",
      "  ",
      "  export const ${9:resetDoSomething} = () => {",
      "    return (dispatch) => {",
      "      dispatch({",
      "        type: actionTypes.${4:ACTION_TYPE}_RESET,",
      "        payload: {",
      "            ${6:doSomethingProcess} :{ status : processTypes.IDLE}",
      "        }",
      "      });",
      "    };",
      "  };"
    ]
  },
  "Redux Switcher Button": {
    "prefix": "vrswitcher",
    "body": [
      "    //TODO: import process , Switcher, ThemeConsumer",
      "    <Switcher",
      "      value={${1:process}.status}",
      "      IDLE={",
      "        <Button>",
      "          <ButtonText>${2:IdleMessage}</ButtonText>",
      "        </Button>",
      "      }",
      "      PROCESSING={",
      "        <Button>",
      "          <ButtonText>${3:ProcessingMessage}</ButtonText>",
      "          <ThemeConsumer>",
      "            {(theme) => (",
      "              <ActivityIndicator color={theme.PRIMARY_COLOR} size=\"large\" />",
      "            )}",
      "          </ThemeConsumer>",
      "        </Button>",
      "      }",
      "      SUCCESS={",
      "        <Button>",
      "          <ButtonText>${4:SuccessMessage}</ButtonText>",
      "        </Button>",
      "      }",
      "      ERROR={",
      "        <Button>",
      "          <ButtonText>{${1:process}.error}</ButtonText>",
      "        </Button>",
      "      }",
      "    />",
      ""
    ],
    "description": ""
  },
  "Redux Container export": {
    "prefix": "vrcontainerexport",
    "body": [
      "import ${1:ComponentContainer} from \"./${1:ComponentContainer}\"",
      "export default ${1:ComponentContainer}"
    ],
    "description": "Container export"
  },
  "Redux Container Components": {
    "prefix": "vrcontainer",
    "body": [
      "import React, {Component} from 'react';",
      "import {bindActionCreators} from 'redux';",
      "import {connect} from 'react-redux';",
      "",
      "import ${1:Component} from './${1:Component}';",
      "export class ${1:Component}Container extends Component {",
      "  render() {",
      "    return <${1:Component} ${2:{...this.props}}/>;",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({});",
      "",
      "const mapDispatchToProps = (dispatch) => ({});",
      "",
      "export default connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps,",
      ")(${1:Component}Container);",
      ""
    ],
    "description": "Redux Container Components"
  },
  "Redux Store import": {
    "prefix": "vrstoreimports",
    "body": [
      "import * as ${1:domain}Actions from 'store/${2:Domain}/actions';",
      "import * as ${1:domain}Selectors from 'store/${2:Domain}/selectors';"
    ],
    "description": "Redux Store import"
  },
  "Redux Component Lifecycle methods": {
    "prefix": "vrlifecyclemethods",
    "body": [
      "//#region lifecycle",
      "  componentDidMount() {}",
      "  componentDidUpdate(prevProps, prevState, snapshot) {",
      "    if (",
      "      prevProps.${1:doSomethingProcess}.status !==",
      "        this.props.${1:doSomethingProcess}.status &&",
      "      this.props.${1:doSomethingProcess}.status === 'SUCCESS'",
      "    ) {",
      "      setTimeout(() => {",
      "        this.props.${2:domainAction}.${3:resetDoSomething}();",
      "      }, 1500);",
      "    }",
      "    if (",
      "      prevProps.${1:doSomethingProcess}.status !==",
      "        this.props.${1:doSomethingProcess}.status &&",
      "      this.props.${1:doSomethingProcess}.status === 'ERROR'",
      "    ) {",
      "      setTimeout(() => {",
      "        this.props.${2:domainAction}.${3:resetDoSomething}();",
      "      }, 2500);",
      "    }",
      "  }",
      "  componentWillUnmount() {",
      "    this.props.${2:domainAction}.${3:resetDoSomething}();",
      "  }",
      "  //#endregion",
      "",
      "  //#region handlers",
      "  ",
      "  //#endregion"
    ],
    "description": "Redux Component Lifecycle methods"
  }
,
    "React Native List Component": {
        "prefix": "vrnlist",
        "body": [
            "import React from 'react'",
            "import {View, Text} from 'react-native'",
            "import styled from 'styled-components'",
            "",
            "import ${3:AccountsListItem} from 'components/${3:AccountsListItem}'",
            "const Wrapper = styled.FlatList``",
            "export default function ${1:AccountsList}({${2:items}, ${5:itemPress}}) {",
            "\tconst renderItem = ({item: ${4:itemName} }) => {",
            "\t\t return (",
            "\t\t\t< ${3:AccountsListItem} ${4:itemName}={${4:itemName}} ${5:itemPress}={${5:itemPress}} />",
            "\t\t)",
            "\t}",
            "\treturn (",
            "\t\t<Wrapper",
            "\t\t\tdata={${2:items}}",
            "\t\t\trenderItem={renderItem}",
            "\t\t\tkeyExtractor={(item, index) => index.toString()}",
            "\t\t/>",
            "\t)",
            "}",
            ""
        ],
        "description": "React Native List Component"
    }
}